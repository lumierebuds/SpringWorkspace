<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="board">
	<select id="selectBoardTypeList" resultMap="boardTypeMap">
		SELECT *
		FROM BOARD_TYPE
		ORDER BY BOARD_CD
	</select>
	
	<resultMap id="boardTypeMap" type="boardType" >
		<id column="board_cd" property="boardCode"/>
		<result column="board_name" property="boardName"/>
	</resultMap>
	
	<!-- rownum 방식 조회 -->
	<!-- 	<select id="selectList" resultType="board"> 
	      SELECT * 
	      FROM (SELECT B.* , ROWNUM RNUM
	            FROM (
	               SELECT
	                    BOARD_NO,
	                    BOARD_TITLE,
	                    USER_NAME AS BOARD_WRITER,
	                    COUNT,
	                    CREATE_DATE
	                FROM BOARD B
	                LEFT JOIN MEMBER M ON BOARD_WRITER = USER_NO
	                WHERE B.STATUS = 'Y'
	                ORDER BY BOARD_NO DESC
	             ) B
	            ) C
	      WHERE RNUM <![CDATA[ >= ]]> #{startRow} AND RNUM <![CDATA[ <= ]]> #{endRow}
	</select> -->
	
	<!-- rowBounds 방식 조회 -->
	<select id="selectList" resultType="board"> 
	      SELECT
	          BOARD_NO,
	          BOARD_TITLE,
	          USER_NAME AS BOARD_WRITER,
	          COUNT,
	          CREATE_DATE
	      FROM BOARD B
	      LEFT JOIN MEMBER M ON BOARD_WRITER = USER_NO
	      WHERE B.STATUS = 'Y' AND BOARD_CD = #{boardCode}
	      <if test="keyword != null and keyword != ''"> 
	      	AND 
	      	<choose>
	      		<when test="condition == 'title'">
	      			BOARD_TITLE LIKE '%' || #{keyword} || '%'
	      		</when> <!-- 작성자 -->
	      		<when test="condition == 'writer'">
	      			USER_NAME LIKE '%' || #{keyword} || '%'
	      		</when> <!-- 제목 -->
	      		<when test="condition == 'content'">
	      			BOARD_CONTENT LIKE '%' || #{keyword} || '%'
	      		</when> <!-- 내용 -->
	      		<when test="condition == 'titleAndContent'">
	      			(BOARD_TITLE LIKE '%' || #{keyword} || '%'
	      				OR
	      			BOARD_CONTENT LIKE '%' || #{keyword} || '%')
	      		</when> <!-- 작성자 + 내용  -->
	      		
	      	</choose>
	      </if>
	      ORDER BY BOARD_NO DESC
	</select>
	<!--
		전체 데이터를 전부 조회한 이후에, resultSet의 cursor의 위치를 
		내가 지정한 offset으로 이동시킴, 내가 지정한 limit까지 반복하면서 
		값을 가져온다.
	  -->
	
	<select id="selectListCount" resultType="int">
		SELECT
			COUNT(*)
		FROM BOARD B
		LEFT JOIN MEMBER M ON BOARD_WRITER = USER_NO 
		WHERE B.STATUS = 'Y' AND BOARD_CD = #{boardCode}
		<if test="keyword != null and keyword != ''"> 
	      	AND 
	      	<choose>
	      		<when test="condition == 'title'">
	      			BOARD_TITLE LIKE '%' || #{keyword} || '%'
	      		</when> <!-- 작성자 -->
	      		<when test="condition == 'writer'">
	      			USER_NAME LIKE '%' || #{keyword} || '%'
	      		</when> <!-- 제목 -->
	      		<when test="condition == 'content'">
	      			BOARD_CONTENT LIKE '%' || #{keyword} || '%'
	      		</when> <!-- 내용 -->
	      		<when test="condition == 'titleAndContent'">
	      			(BOARD_TITLE LIKE '%' || #{keyword} || '%'
	      				OR
	      			BOARD_CONTENT LIKE '%' || #{keyword} || '%')
	      		</when> <!-- 작성자 + 내용  -->
	      		
	      	</choose>
	     </if>
	</select>
	<!-- 조인을 해준 이유 : 나중에 "작성자" 이름으로 검색하는 것에 대비하기 위함  -->
	
	<!-- 게시글 등록 -->
	<insert id="insertBoard" useGeneratedKeys="true">
		
		<selectKey keyProperty="boardNo" resultType="int" order="BEFORE"> <!-- 메인쿼리문 실행 이전 -->
			SELECT SEQ_BNO.NEXTVAL FROM DUAL 
		</selectKey> 
		<!-- boardNo 변수에 시퀀스 자동증가값을 얻어서 int 형으로 저장해 사용한다.  -->
		<!-- boardNo 값은 쿼리문을 실행한 후에 컨틀로러에서 전달된 board 객체가 해당 setter을 호출해 값을 변경해준다. -->
		<!-- 컨트롤러에서도 초기화되어 게시글로 "리다이렉트할 때 쓸 수 있음" -->
	
		INSERT INTO BOARD
		VALUES(
			#{boardNo} , 
			#{boardTitle}, 
			#{boardContent},
			#{boardCd}, 
			#{boardWriter},
			DEFAULT,
			DEFAULT,
			DEFAULT
		)
	</insert>
	
	<!-- 게시글의 이미지 저장 (첨부파일) -->
	<insert id="insertBoardImg">
		INSERT INTO BOARD_IMG
		(
			BOARD_IMG_NO,
			ORIGIN_NAME,
			CHANGE_NAME,
			REF_BNO,
			IMG_LEVEL
		) 
		VALUES(
			SEQ_IMG_NO.NEXTVAL,
			#{originName},
			#{changeName},
			#{refBno},
			#{imgLevel}
		)
	</insert>
	
	<!-- resultMap으로 boardExtMap 안의 attachment 필드의 값을 초기화 시켜주기 -->
	<!-- 나머지 필드들도 파싱-->
	<resultMap type="boardExt" id="boardExtMap">
		<id column="BOARD_NO" property="boardNo"/>
		<result column="BOARD_TITLE" property="boardTitle"/>
		<result column="USER_NAME" property="userName"/>
		<result column="CREATE_DATE" property="createDate"/>
		<result column="COUNT" property="count"/>
		<result column="BOARD_CONTENT" property="boardContent"/>
		<result column="BOARD_CD" property="boardCd"/>
		
		
		<!-- BoardImg 기본 생성자 호출 : attachment 생성 -->
		<!-- 
			결과값을 VO 클래스로 매핑하는 태그에 해당한다.
		 -->
		<association property="attachment">
			<id column="BOARD_IMG_NO" property="boardImgNo"/>
			<result column="ORIGIN_NAME" property="originName"/>
			<result column="CHANGE_NAME" property="changeName"/>
			<result column="IMG_LEVEL" property="imgLevel"/>
		</association>
		
		<!-- 리스트로 댓글 정보를 모두 조회하기 -->
		<collection property="replyList">
			
		</collection>
	</resultMap>
	
	
	<select id="selectBoard" resultMap="boardExtMap">
		SELECT
			BOARD_NO,
			BOARD_TITLE, 
			USER_NAME, 
			CREATE_DATE,
			COUNT,
			BOARD_CONTENT,
			BOARD_CD,
			
			BOARD_IMG_NO,
			ORIGIN_NAME, 
			CHANGE_NAME,
			IMG_LEVEL <!-- BOARD_IMG_NO ~ IMG_LEVEL 컬럼값을 BoardExt 클래스 안의 attachment 필드에 객체로 추가 -->
		FROM BOARD B 
		LEFT JOIN MEMBER M ON (BOARD_WRITER = USER_NO)
		LEFT JOIN BOARD_IMG BI ON (BOARD_NO = REF_BNO)
		WHERE B.STATUS = 'Y' AND BOARD_NO = #{boardNo}
	</select>
	
	
	<!-- 게시글 조회수 증가 -->
	<update id="increaseCount">
		UPDATE BOARD SET
		COUNT = COUNT + 1
		WHERE BOARD_NO = #{bno}
	</update>
	
	
	<!-- 게시글 수정 요청 쿼리문 -->
	<update id="updateBoard" parameterType="board">
		UPDATE BOARD
		SET BOARD_TITLE = #{boardTitle},
			BOARD_CONTENT = #{boardContent},
			CREATE_DATE = SYSDATE
		WHERE BOARD_NO = #{boardNo}
	</update>
	
	<!-- 게시글의 이미지 정보 수정 -->
	<update id="updateBoardImg">
		UPDATE BOARD_IMG
		SET	ORIGIN_NAME = #{originName},
			CHANGE_NAME = #{changeName}
		WHERE BOARD_IMG_NO = #{boardImgNo}
	</update>
	
	<!-- 게시글 수정시 이미지 삭제 -->
	<delete id="deleteBoardImg">
		DELETE FROM BOARD_IMG
		WHERE BOARD_IMG_NO IN (#{deleteList})
	</delete>
	
	
</mapper>